** start of main.py **

import random
import copy

class Hat:
    def __init__(self, **kwargs):
        self.contents = []
        # For each color and count, add that many balls to contents
        for color, count in kwargs.items():
            for _ in range(count):
                self.contents.append(color)

    def draw(self, num_balls_drawn):
        # If number to draw is more than available balls, return all balls
        if num_balls_drawn >= len(self.contents):
            all_balls = self.contents.copy()
            self.contents = []
            return all_balls

        drawn_balls = []
        for _ in range(num_balls_drawn):
            # Choose a random index to remove from contents
            index = random.randint(0, len(self.contents) - 1)
            drawn_balls.append(self.contents.pop(index))
        return drawn_balls


def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    successful_experiments = 0

    for _ in range(num_experiments):
        # Create a deep copy of the hat for this experiment so original hat remains unchanged
        hat_copy = copy.deepcopy(hat)
        drawn = hat_copy.draw(num_balls_drawn)

        # Count how many balls of each color were drawn
        drawn_counts = {}
        for ball in drawn:
            drawn_counts[ball] = drawn_counts.get(ball, 0) + 1

        # Check if all expected balls are in the drawn balls with at least the expected count
        success = True
        for color, count in expected_balls.items():
            if drawn_counts.get(color, 0) < count:
                success = False
                break

        if success:
            successful_experiments += 1

    # Return probability as successful / total experiments
    return successful_experiments / num_experiments


** end of main.py **

